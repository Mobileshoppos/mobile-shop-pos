-- Phase 2.1: Create a table to track payments made to suppliers.
CREATE TABLE public.supplier_payments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    supplier_id BIGINT NOT NULL REFERENCES public.suppliers(id) ON DELETE CASCADE,
    purchase_id BIGINT REFERENCES public.purchases(id) ON DELETE SET NULL, -- Optional link to a specific purchase
    amount NUMERIC(10, 2) NOT NULL CHECK (amount > 0),
    payment_date DATE NOT NULL DEFAULT CURRENT_DATE,
    payment_method TEXT CHECK (payment_method IN ('Cash', 'Bank Transfer', 'Cheque', 'Other')),
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    user_id UUID DEFAULT auth.uid() REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Enable RLS for the new payments table
ALTER TABLE public.supplier_payments ENABLE ROW LEVEL SECURITY;

-- Policy: Authenticated users can manage their own payments.
CREATE POLICY "Allow users to manage their own supplier payments"
ON public.supplier_payments
FOR ALL
USING (auth.uid() = user_id);


-- Phase 2.2: Update the existing 'purchases' table to track payment status.
ALTER TABLE public.purchases
ADD COLUMN status TEXT NOT NULL DEFAULT 'unpaid' CHECK (status IN ('unpaid', 'partially_paid', 'paid')),
ADD COLUMN amount_paid NUMERIC(10, 2) NOT NULL DEFAULT 0.00,
ADD COLUMN balance_due NUMERIC(10, 2) NOT NULL DEFAULT 0.00;

-- Set the initial value for balance_due to be the same as total_amount for existing records.
-- This ensures old data is consistent with the new structure.
UPDATE public.purchases
SET balance_due = total_amount;