-- This migration creates the definitive variant management system.
-- It ensures a clean slate by first dropping any old version of the table.

-- ========= STEP 1: DROP THE OLD, UNUSED `product_variants` TABLE =========
-- We use CASCADE to also remove any constraints that depend on this table.
-- IF EXISTS makes this command safe to re-run.
DROP TABLE IF EXISTS public.product_variants CASCADE;


-- ========= STEP 2: CREATE THE NEW, CORRECT `product_variants` TABLE =========
-- This is our new, powerful design with a JSONB attributes column.
CREATE TABLE public.product_variants (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    attributes JSONB,
    barcode TEXT,
    purchase_price NUMERIC,
    sale_price NUMERIC,

    -- Ensures no two variants for the same user can have the same barcode.
    CONSTRAINT unique_barcode_per_user UNIQUE (user_id, barcode)
);
COMMENT ON TABLE public.product_variants IS 'Defines specific variants of a product, each with its own attributes, price, and barcode.';


-- ========= STEP 3: UPDATE THE `inventory` TABLE =========
-- Add the variant_id column to link each inventory item to a specific variant.
ALTER TABLE public.inventory
ADD COLUMN IF NOT EXISTS variant_id BIGINT REFERENCES public.product_variants(id) ON DELETE SET NULL;

COMMENT ON COLUMN public.inventory.variant_id IS 'Links this inventory item to a specific, defined variant.';

-- Remove old columns that are now handled by the attributes system.
ALTER TABLE public.inventory
DROP COLUMN IF EXISTS condition,
DROP COLUMN IF EXISTS color,
DROP COLUMN IF EXISTS ram_rom,
DROP COLUMN IF EXISTS guaranty,
DROP COLUMN IF EXISTS pta_status;